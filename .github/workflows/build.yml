name: Autobuild

on:
  schedule:
    - cron: '0 0 * * *'
  push:
  workflow_dispatch:
  repository_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        architecture: [x64, aarch64]
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          root-reserve-mb: '8192'
          temp-reserve-mb: '8192'
      - name: Checkout Zebrafish
        uses: actions/checkout@v4
        with:
          path: zebrafish
      - name: Checkout Buildroot
        uses: actions/checkout@v4
        with:
          repository: buildroot/buildroot
          ref: master
          path: buildroot
      - name: Install dependencies
        shell: bash
        run: |
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y sed make binutils build-essential diffutils bash patch \
            gzip bzip2 perl tar cpio unzip rsync file bc findutils wget python3 git libelf-dev jq \
            curl libdigest-sha3-perl gettext autopoint autoconf autotools-dev libtool-bin g++-14 gcc-14 \
            qemu-system
          sudo rm -f /usr/bin/gcc /usr/bin/g++
          sudo ln -s /usr/bin/gcc-14 /usr/bin/gcc
          sudo ln -s /usr/bin/g++-14 /usr/bin/g++
      - name: Patch Buildroot
        shell: bash
        run: |
          cd "${{ github.workspace }}/zebrafish/buildroot-scripts"
          chmod +x patch.sh
          ./patch.sh \
            "${{ github.workspace }}/buildroot" \
            "${{ github.workspace }}/zebrafish"
      - name: Restore Buildroot cache
        uses: actions/cache/restore@v4
        if: ${{ github.event_name != 'schedule' }}
        with:
          key: zebrafish-cache-${{ matrix.architecture }}
          path: ${{ github.workspace }}/buildroot/output
      - name: Cleanup empty dl folders
        shell: bash
        run: |
          DL_DIR="${{ github.workspace }}/buildroot/dl"
          if [ -d "$DL_DIR" ]; then
            echo "Scanning for empty folders in $DL_DIR..."
            removed=$(find "$DL_DIR" -type d -empty)
            if [ -n "$removed" ]; then
              echo "Removing empty folders:"
              echo "$removed"
              # Delete them
              find "$DL_DIR" -type d -empty -delete
            else
              echo "No empty folders found."
            fi
          else
            echo "dl directory not found."
          fi
      - name: Force Buildroot to redownload files
        run: |
          find "${{ github.workspace }}/buildroot/output/build" -type f -name ".stamp_downloaded" -exec rm -f {} +
      - name: Configure Buildroot
        shell: bash
        run: |
          cd "${{ github.workspace }}/zebrafish/buildroot-scripts"
          chmod +x config.sh
          ./config.sh \
            "${{ github.workspace }}/buildroot" \
            "${{ github.workspace }}/zebrafish" \
            "${{ matrix.architecture }}"
      - name: Download sources for packages
        shell: bash
        run: |
          cd "${{ github.workspace }}/zebrafish/buildroot-scripts"
          chmod +x download.sh
          ./download.sh \
            "${{ github.workspace }}/buildroot" \
            "${{ github.workspace }}/zebrafish"
      - name: Build Buildroot
        shell: bash
        run: |
          cd "${{ github.workspace }}/zebrafish/buildroot-scripts"
          chmod +x build.sh
          ./build.sh \
            "${{ github.workspace }}/buildroot" \
            "${{ github.workspace }}/zebrafish"
      - name: Print SBOM
        shell: bash
        run: |
          cd "${{ github.workspace }}/buildroot"
          ls -l output/build
      - name: Prepare artifacts
        shell: bash
        run: |
          cd "${{ github.workspace }}/zebrafish/buildroot-scripts"
          chmod +x prepare-artifacts.sh
          ./prepare-artifacts.sh \
            "${{ github.workspace }}/buildroot" \
            "${{ github.workspace }}/artifacts" \
            "${{ matrix.architecture }}"
      - name: Test artifacts
        shell: bash
        run: |
          cd "${{ github.workspace }}/zebrafish/buildroot-scripts"
          chmod +x test.sh
          ./test.sh \
            "${{ github.workspace }}/artifacts"
      - name: Upload containerd artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zebrafish-${{ matrix.architecture }}-containerd
          path: ${{ github.workspace }}/artifacts/upload/zebrafish-${{ matrix.architecture }}-containerd.tar
      - name: Upload Docker artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zebrafish-${{ matrix.architecture }}-docker
          path: ${{ github.workspace }}/artifacts/upload/zebrafish-${{ matrix.architecture }}-docker.tar
      - name: Deploy to CDN
        if: github.ref == 'refs/heads/master'
        run: |
          cat <<EOF > ./rclone.conf
          [s3]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          endpoint = ${{ secrets.AWS_ENDPOINT_URL }}
          acl = public-read
          no_check_bucket = true
          EOF
          docker run -v ./rclone.conf:/config/rclone/rclone.conf -v "${{ github.workspace }}/artifacts/upload:/artifacts" rclone/rclone:latest -vv copy /artifacts/ s3:${{ secrets.AWS_BUCKET }}/
          rm ./rclone.conf
      - name: Prepare Buildroot cache
        shell: bash
        if: always()
        run: |
          cd "${{ github.workspace }}/zebrafish/buildroot-scripts"
          chmod +x prepare-cache.sh
          ./prepare-cache.sh \
            "${{ github.workspace }}/buildroot"
      - name: Save Buildroot cache
        uses: actions/cache/save@v4
        if: always()
        with:
          key: zebrafish-cache-${{ matrix.architecture }}
          path: ${{ github.workspace }}/buildroot/output
