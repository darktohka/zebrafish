#!/bin/sh

DAEMON="dockerd"
PIDFILE="/var/run/$DAEMON.pid"

DOCKERD_ARGS=""

# shellcheck source=/dev/null
[ -r "/etc/default/$DAEMON" ] && . "/etc/default/$DAEMON"

start() {
	printf 'Starting %s: ' "$DAEMON"
	# Dockerd logs only to stdout/stderr, which is lost with
	# --background. The wrapper script runs the given command
	# (after "--", including dockerd) and forwards stdout/stderr
	# to syslog.
	# shellcheck disable=SC2086 # we need word splitting for DOCKERD_ARGS
	start-stop-daemon --start --background --pidfile "$PIDFILE" \
		--exec /usr/libexec/dockerd-syslog-wrapper.sh \
		-- "/usr/bin/$DAEMON" --pidfile "$PIDFILE" $DOCKERD_ARGS
	status=$?
	if [ "$status" -eq 0 ]; then
		echo "OK"
	else
		echo "FAIL"
	fi
	return "$status"
}

stop() {
	printf 'Stopping %s: ' "$DAEMON"
	start-stop-daemon --stop --pidfile "$PIDFILE" --exec "/usr/bin/$DAEMON"
	status=$?
	if [ "$status" -eq 0 ]; then
		echo "OK"
	else
		echo "FAIL"
		return "$status"
	fi
	while start-stop-daemon --stop --test --quiet --pidfile "$PIDFILE" \
		--exec "/usr/bin/$DAEMON"; do
		sleep 0.1
	done
	rm -f "$PIDFILE"
	return "$status"
}

restart() {
	stop
	start
}

reload() {
	printf "Reloading %s config: " "$DAEMON"
	start-stop-daemon --stop --signal HUP -q --pidfile "$PIDFILE" \
		--exec "/usr/bin/$DAEMON"
	status=$?
	if [ "$status" -eq 0 ]; then
		echo "OK"
	else
		echo "FAIL"
	fi
	return "$status"
}

case "$1" in
	start|stop|restart|reload)
		"$1";;
	*)
		echo "Usage: $0 {start|stop|restart|reload}"
		exit 1
esac
