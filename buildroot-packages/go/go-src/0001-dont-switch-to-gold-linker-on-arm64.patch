From: Disyer <daniel@tohka.us>
Date: Sat, 2 Nov 2024 20:25:52 +0200
Subject: [PATCH] Don't switch to gold linker on ARM64

---
 src/cmd/link/internal/ld/lib.go | 21 ---------------------
 1 file changed, 21 deletions(-)

diff --git a/src/cmd/link/internal/ld/lib.go b/src/cmd/link/internal/ld/lib.go
index 0c37a1d..4524db8 100644
--- a/src/cmd/link/internal/ld/lib.go
+++ b/src/cmd/link/internal/ld/lib.go
@@ -1661,27 +1661,6 @@ func (ctxt *Link) hostlink() {
			// Use lld to avoid errors from default linker (issue #38838)
			altLinker = "lld"
		}
-
-		if ctxt.Arch.InFamily(sys.ARM64) && buildcfg.GOOS == "linux" {
-			// On ARM64, the GNU linker will fail with
-			// -znocopyreloc if it thinks a COPY relocation is
-			// required. Switch to gold.
-			// https://sourceware.org/bugzilla/show_bug.cgi?id=19962
-			// https://go.dev/issue/22040
-			altLinker = "gold"
-
-			// If gold is not installed, gcc will silently switch
-			// back to ld.bfd. So we parse the version information
-			// and provide a useful error if gold is missing.
-			name, args := flagExtld[0], flagExtld[1:]
-			args = append(args, "-fuse-ld=gold", "-Wl,--version")
-			cmd := exec.Command(name, args...)
-			if out, err := cmd.CombinedOutput(); err == nil {
-				if !bytes.Contains(out, []byte("GNU gold")) {
-					log.Fatalf("ARM64 external linker must be gold (issue #15696, 22040), but is not: %s", out)
-				}
-			}
-		}
	}
	if ctxt.Arch.Family == sys.ARM64 && buildcfg.GOOS == "freebsd" {
		// Switch to ld.bfd on freebsd/arm64.
diff --git a/src/cmd/go/internal/modfetch/fetch.go b/src/cmd/go/internal/modfetch/fetch.go
--- a/src/cmd/go/internal/modfetch/fetch.go
+++ b/src/cmd/go/internal/modfetch/fetch.go
@@ -715,33 +715,17 @@ func checkModSum(mod module.Version, h s
 // haveModSumLocked reports whether the pair mod,h is already listed in go.sum.
 // If it finds a conflicting pair instead, it calls base.Fatalf.
 // goSum.mu must be locked.
-func haveModSumLocked(mod module.Version, h string) bool {
-	sumFileName := "go.sum"
-	if strings.HasSuffix(GoSumFile, "go.work.sum") {
-		sumFileName = "go.work.sum"
-	}
-	for _, vh := range goSum.m[mod] {
-		if h == vh {
-			return true
-		}
-		if strings.HasPrefix(vh, "h1:") {
-			base.Fatalf("verifying %s@%s: checksum mismatch\n\tdownloaded: %v\n\t%s:     %v"+goSumMismatch, mod.Path, mod.Version, h, sumFileName, vh)
-		}
+func haveModSumLocked(mod module.Version, _ string) bool {
+	if _, ok := goSum.m[mod]; ok {
+		return true
 	}
 	// Also check workspace sums.
-	foundMatch := false
-	// Check sums from all files in case there are conflicts between
-	// the files.
-	for goSumFile, goSums := range goSum.w {
-		for _, vh := range goSums[mod] {
-			if h == vh {
-				foundMatch = true
-			} else if strings.HasPrefix(vh, "h1:") {
-				base.Fatalf("verifying %s@%s: checksum mismatch\n\tdownloaded: %v\n\t%s:     %v"+goSumMismatch, mod.Path, mod.Version, h, goSumFile, vh)
-			}
+	for _, goSums := range goSum.w {
+		if _, ok := goSums[mod]; ok {
+			return true
 		}
 	}
-	return foundMatch
+	return false
 }
 
 // addModSumLocked adds the pair mod,h to go.sum.
@@ -758,29 +742,7 @@ func addModSumLocked(mod module.Version,
 
 // checkSumDB checks the mod, h pair against the Go checksum database.
 // It calls base.Fatalf if the hash is to be rejected.
-func checkSumDB(mod module.Version, h string) error {
-	modWithoutSuffix := mod
-	noun := "module"
-	if before, found := strings.CutSuffix(mod.Version, "/go.mod"); found {
-		noun = "go.mod"
-		modWithoutSuffix.Version = before
-	}
-
-	db, lines, err := lookupSumDB(mod)
-	if err != nil {
-		return module.VersionError(modWithoutSuffix, fmt.Errorf("verifying %s: %v", noun, err))
-	}
-
-	have := mod.Path + " " + mod.Version + " " + h
-	prefix := mod.Path + " " + mod.Version + " h1:"
-	for _, line := range lines {
-		if line == have {
-			return nil
-		}
-		if strings.HasPrefix(line, prefix) {
-			return module.VersionError(modWithoutSuffix, fmt.Errorf("verifying %s: checksum mismatch\n\tdownloaded: %v\n\t%s: %v"+sumdbMismatch, noun, h, db, line[len(prefix)-len("h1:"):]))
-		}
-	}
+func checkSumDB(_ module.Version, _ string) error {
 	return nil
 }
 

--
2.47.0

